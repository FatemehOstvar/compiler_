# Generated from D:/pycharm/Parser/SASLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,73,506,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,
        1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
        1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,1,51,1,52,1,52,5,52,371,8,52,10,52,12,52,374,
        9,52,1,52,3,52,377,8,52,1,53,4,53,380,8,53,11,53,12,53,381,1,53,
        1,53,5,53,386,8,53,10,53,12,53,389,9,53,1,54,1,54,1,54,1,54,4,54,
        395,8,54,11,54,12,54,396,1,55,1,55,1,55,1,55,4,55,403,8,55,11,55,
        12,55,404,1,56,1,56,4,56,409,8,56,11,56,12,56,410,1,57,4,57,414,
        8,57,11,57,12,57,415,1,57,1,57,4,57,420,8,57,11,57,12,57,421,1,57,
        1,57,3,57,426,8,57,1,57,4,57,429,8,57,11,57,12,57,430,1,58,1,58,
        5,58,435,8,58,10,58,12,58,438,9,58,1,59,1,59,1,60,1,60,1,61,1,61,
        1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,4,67,
        458,8,67,11,67,12,67,459,1,68,1,68,5,68,464,8,68,10,68,12,68,467,
        9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,479,
        8,70,10,70,12,70,482,9,70,1,70,1,70,1,71,1,71,1,71,1,71,5,71,490,
        8,71,10,71,12,71,493,9,71,1,71,1,71,1,71,1,71,1,71,1,72,4,72,501,
        8,72,11,72,12,72,502,1,72,1,72,2,465,491,0,73,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
        59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,
        137,69,139,70,141,71,143,72,145,73,1,0,12,1,0,49,57,1,0,48,57,3,
        0,48,57,65,70,97,102,1,0,48,49,1,0,48,55,2,0,69,69,101,101,2,0,43,
        43,45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,
        65,90,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,522,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,
        121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
        0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
        1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,
        3,151,1,0,0,0,5,157,1,0,0,0,7,164,1,0,0,0,9,169,1,0,0,0,11,174,1,
        0,0,0,13,181,1,0,0,0,15,184,1,0,0,0,17,189,1,0,0,0,19,196,1,0,0,
        0,21,201,1,0,0,0,23,207,1,0,0,0,25,216,1,0,0,0,27,222,1,0,0,0,29,
        230,1,0,0,0,31,234,1,0,0,0,33,237,1,0,0,0,35,244,1,0,0,0,37,250,
        1,0,0,0,39,256,1,0,0,0,41,263,1,0,0,0,43,271,1,0,0,0,45,281,1,0,
        0,0,47,290,1,0,0,0,49,297,1,0,0,0,51,299,1,0,0,0,53,301,1,0,0,0,
        55,303,1,0,0,0,57,305,1,0,0,0,59,307,1,0,0,0,61,310,1,0,0,0,63,313,
        1,0,0,0,65,316,1,0,0,0,67,319,1,0,0,0,69,321,1,0,0,0,71,324,1,0,
        0,0,73,326,1,0,0,0,75,329,1,0,0,0,77,332,1,0,0,0,79,335,1,0,0,0,
        81,337,1,0,0,0,83,339,1,0,0,0,85,341,1,0,0,0,87,343,1,0,0,0,89,345,
        1,0,0,0,91,348,1,0,0,0,93,351,1,0,0,0,95,353,1,0,0,0,97,356,1,0,
        0,0,99,359,1,0,0,0,101,362,1,0,0,0,103,365,1,0,0,0,105,376,1,0,0,
        0,107,379,1,0,0,0,109,390,1,0,0,0,111,398,1,0,0,0,113,406,1,0,0,
        0,115,413,1,0,0,0,117,432,1,0,0,0,119,439,1,0,0,0,121,441,1,0,0,
        0,123,443,1,0,0,0,125,445,1,0,0,0,127,447,1,0,0,0,129,449,1,0,0,
        0,131,451,1,0,0,0,133,453,1,0,0,0,135,455,1,0,0,0,137,461,1,0,0,
        0,139,470,1,0,0,0,141,474,1,0,0,0,143,485,1,0,0,0,145,500,1,0,0,
        0,147,148,5,105,0,0,148,149,5,110,0,0,149,150,5,116,0,0,150,2,1,
        0,0,0,151,152,5,102,0,0,152,153,5,108,0,0,153,154,5,111,0,0,154,
        155,5,97,0,0,155,156,5,116,0,0,156,4,1,0,0,0,157,158,5,100,0,0,158,
        159,5,111,0,0,159,160,5,117,0,0,160,161,5,98,0,0,161,162,5,108,0,
        0,162,163,5,101,0,0,163,6,1,0,0,0,164,165,5,99,0,0,165,166,5,104,
        0,0,166,167,5,97,0,0,167,168,5,114,0,0,168,8,1,0,0,0,169,170,5,98,
        0,0,170,171,5,111,0,0,171,172,5,111,0,0,172,173,5,108,0,0,173,10,
        1,0,0,0,174,175,5,115,0,0,175,176,5,116,0,0,176,177,5,114,0,0,177,
        178,5,105,0,0,178,179,5,110,0,0,179,180,5,103,0,0,180,12,1,0,0,0,
        181,182,5,105,0,0,182,183,5,102,0,0,183,14,1,0,0,0,184,185,5,101,
        0,0,185,186,5,108,0,0,186,187,5,115,0,0,187,188,5,101,0,0,188,16,
        1,0,0,0,189,190,5,115,0,0,190,191,5,119,0,0,191,192,5,105,0,0,192,
        193,5,116,0,0,193,194,5,99,0,0,194,195,5,104,0,0,195,18,1,0,0,0,
        196,197,5,99,0,0,197,198,5,97,0,0,198,199,5,115,0,0,199,200,5,101,
        0,0,200,20,1,0,0,0,201,202,5,119,0,0,202,203,5,104,0,0,203,204,5,
        105,0,0,204,205,5,108,0,0,205,206,5,101,0,0,206,22,1,0,0,0,207,208,
        5,99,0,0,208,209,5,111,0,0,209,210,5,110,0,0,210,211,5,116,0,0,211,
        212,5,105,0,0,212,213,5,110,0,0,213,214,5,117,0,0,214,215,5,101,
        0,0,215,24,1,0,0,0,216,217,5,98,0,0,217,218,5,114,0,0,218,219,5,
        101,0,0,219,220,5,97,0,0,220,221,5,107,0,0,221,26,1,0,0,0,222,223,
        5,100,0,0,223,224,5,101,0,0,224,225,5,102,0,0,225,226,5,97,0,0,226,
        227,5,117,0,0,227,228,5,108,0,0,228,229,5,116,0,0,229,28,1,0,0,0,
        230,231,5,102,0,0,231,232,5,111,0,0,232,233,5,114,0,0,233,30,1,0,
        0,0,234,235,5,100,0,0,235,236,5,111,0,0,236,32,1,0,0,0,237,238,5,
        114,0,0,238,239,5,101,0,0,239,240,5,116,0,0,240,241,5,117,0,0,241,
        242,5,114,0,0,242,243,5,110,0,0,243,34,1,0,0,0,244,245,5,99,0,0,
        245,246,5,108,0,0,246,247,5,97,0,0,247,248,5,115,0,0,248,249,5,115,
        0,0,249,36,1,0,0,0,250,251,5,99,0,0,251,252,5,111,0,0,252,253,5,
        110,0,0,253,254,5,115,0,0,254,255,5,116,0,0,255,38,1,0,0,0,256,257,
        5,112,0,0,257,258,5,117,0,0,258,259,5,98,0,0,259,260,5,108,0,0,260,
        261,5,105,0,0,261,262,5,99,0,0,262,40,1,0,0,0,263,264,5,112,0,0,
        264,265,5,114,0,0,265,266,5,105,0,0,266,267,5,118,0,0,267,268,5,
        97,0,0,268,269,5,116,0,0,269,270,5,101,0,0,270,42,1,0,0,0,271,272,
        5,112,0,0,272,273,5,114,0,0,273,274,5,111,0,0,274,275,5,116,0,0,
        275,276,5,101,0,0,276,277,5,99,0,0,277,278,5,116,0,0,278,279,5,101,
        0,0,279,280,5,100,0,0,280,44,1,0,0,0,281,282,5,116,0,0,282,283,5,
        101,0,0,283,284,5,109,0,0,284,285,5,112,0,0,285,286,5,108,0,0,286,
        287,5,97,0,0,287,288,5,116,0,0,288,289,5,101,0,0,289,46,1,0,0,0,
        290,291,5,115,0,0,291,292,5,116,0,0,292,293,5,97,0,0,293,294,5,116,
        0,0,294,295,5,105,0,0,295,296,5,99,0,0,296,48,1,0,0,0,297,298,5,
        43,0,0,298,50,1,0,0,0,299,300,5,45,0,0,300,52,1,0,0,0,301,302,5,
        42,0,0,302,54,1,0,0,0,303,304,5,47,0,0,304,56,1,0,0,0,305,306,5,
        37,0,0,306,58,1,0,0,0,307,308,5,43,0,0,308,309,5,43,0,0,309,60,1,
        0,0,0,310,311,5,45,0,0,311,312,5,45,0,0,312,62,1,0,0,0,313,314,5,
        61,0,0,314,315,5,61,0,0,315,64,1,0,0,0,316,317,5,33,0,0,317,318,
        5,61,0,0,318,66,1,0,0,0,319,320,5,60,0,0,320,68,1,0,0,0,321,322,
        5,60,0,0,322,323,5,61,0,0,323,70,1,0,0,0,324,325,5,62,0,0,325,72,
        1,0,0,0,326,327,5,62,0,0,327,328,5,61,0,0,328,74,1,0,0,0,329,330,
        5,38,0,0,330,331,5,38,0,0,331,76,1,0,0,0,332,333,5,124,0,0,333,334,
        5,124,0,0,334,78,1,0,0,0,335,336,5,33,0,0,336,80,1,0,0,0,337,338,
        5,38,0,0,338,82,1,0,0,0,339,340,5,124,0,0,340,84,1,0,0,0,341,342,
        5,94,0,0,342,86,1,0,0,0,343,344,5,126,0,0,344,88,1,0,0,0,345,346,
        5,60,0,0,346,347,5,60,0,0,347,90,1,0,0,0,348,349,5,62,0,0,349,350,
        5,62,0,0,350,92,1,0,0,0,351,352,5,61,0,0,352,94,1,0,0,0,353,354,
        5,43,0,0,354,355,5,61,0,0,355,96,1,0,0,0,356,357,5,45,0,0,357,358,
        5,61,0,0,358,98,1,0,0,0,359,360,5,42,0,0,360,361,5,61,0,0,361,100,
        1,0,0,0,362,363,5,47,0,0,363,364,5,61,0,0,364,102,1,0,0,0,365,366,
        5,37,0,0,366,367,5,61,0,0,367,104,1,0,0,0,368,372,7,0,0,0,369,371,
        7,1,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,377,1,0,0,0,374,372,1,0,0,0,375,377,5,48,0,0,376,368,
        1,0,0,0,376,375,1,0,0,0,377,106,1,0,0,0,378,380,7,1,0,0,379,378,
        1,0,0,0,380,381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,383,
        1,0,0,0,383,387,5,46,0,0,384,386,7,1,0,0,385,384,1,0,0,0,386,389,
        1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,108,1,0,0,0,389,387,
        1,0,0,0,390,391,5,48,0,0,391,392,5,120,0,0,392,394,1,0,0,0,393,395,
        7,2,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,
        1,0,0,0,397,110,1,0,0,0,398,399,5,48,0,0,399,400,5,98,0,0,400,402,
        1,0,0,0,401,403,7,3,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,402,
        1,0,0,0,404,405,1,0,0,0,405,112,1,0,0,0,406,408,5,48,0,0,407,409,
        7,4,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,
        1,0,0,0,411,114,1,0,0,0,412,414,7,1,0,0,413,412,1,0,0,0,414,415,
        1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,419,
        5,46,0,0,418,420,7,1,0,0,419,418,1,0,0,0,420,421,1,0,0,0,421,419,
        1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,425,7,5,0,0,424,426,
        7,6,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,429,
        7,1,0,0,428,427,1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,116,1,0,0,0,432,436,7,7,0,0,433,435,7,8,0,0,434,433,
        1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,118,
        1,0,0,0,438,436,1,0,0,0,439,440,5,40,0,0,440,120,1,0,0,0,441,442,
        5,41,0,0,442,122,1,0,0,0,443,444,5,123,0,0,444,124,1,0,0,0,445,446,
        5,125,0,0,446,126,1,0,0,0,447,448,5,59,0,0,448,128,1,0,0,0,449,450,
        5,44,0,0,450,130,1,0,0,0,451,452,5,58,0,0,452,132,1,0,0,0,453,454,
        5,46,0,0,454,134,1,0,0,0,455,457,5,35,0,0,456,458,7,9,0,0,457,456,
        1,0,0,0,458,459,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,136,
        1,0,0,0,461,465,5,34,0,0,462,464,9,0,0,0,463,462,1,0,0,0,464,467,
        1,0,0,0,465,466,1,0,0,0,465,463,1,0,0,0,466,468,1,0,0,0,467,465,
        1,0,0,0,468,469,5,34,0,0,469,138,1,0,0,0,470,471,5,39,0,0,471,472,
        9,0,0,0,472,473,5,39,0,0,473,140,1,0,0,0,474,475,5,47,0,0,475,476,
        5,47,0,0,476,480,1,0,0,0,477,479,8,10,0,0,478,477,1,0,0,0,479,482,
        1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,480,
        1,0,0,0,483,484,6,70,0,0,484,142,1,0,0,0,485,486,5,47,0,0,486,487,
        5,42,0,0,487,491,1,0,0,0,488,490,9,0,0,0,489,488,1,0,0,0,490,493,
        1,0,0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,1,0,0,0,493,491,
        1,0,0,0,494,495,5,42,0,0,495,496,5,47,0,0,496,497,1,0,0,0,497,498,
        6,71,0,0,498,144,1,0,0,0,499,501,7,11,0,0,500,499,1,0,0,0,501,502,
        1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,
        6,72,0,0,505,146,1,0,0,0,18,0,372,376,381,387,396,404,410,415,421,
        425,430,436,459,465,480,491,502,1,6,0,0
    ]

class SASLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT = 1
    FLOAT = 2
    DOUBLE = 3
    CHAR = 4
    BOOL = 5
    STRING_K = 6
    IF = 7
    ELSE = 8
    SWITCH = 9
    CASE = 10
    WHILE = 11
    CONTINUE = 12
    BREAK = 13
    DEFAULT = 14
    FOR = 15
    DO = 16
    RETURN = 17
    CLASS = 18
    CONST = 19
    PUBLIC = 20
    PRIVATE = 21
    PROTECTED = 22
    TEMPLATE = 23
    STATIC = 24
    PLUS = 25
    MINUS = 26
    MULT = 27
    DIV = 28
    MOD = 29
    INCREMENT = 30
    DECREMENT = 31
    EQ = 32
    NEQ = 33
    LT = 34
    LTE = 35
    GT = 36
    GTE = 37
    AND_AND = 38
    OR_OR = 39
    NOT = 40
    BIT_AND = 41
    BIT_OR = 42
    BIT_XOR = 43
    BIT_NOT = 44
    LSHIFT = 45
    RSHIFT = 46
    ASSIGN = 47
    PLUS_ASSIGN = 48
    MINUS_ASSIGN = 49
    MULT_ASSIGN = 50
    DIV_ASSIGN = 51
    MOD_ASSIGN = 52
    INTEGER_LITERAL = 53
    FLOAT_LITERAL = 54
    HEX_LITERAL = 55
    BINARY_LITERAL = 56
    OCTAL_LITERAL = 57
    SCIENTIFIC_LITERAL = 58
    IDENTIFIER = 59
    LPAREN = 60
    RPAREN = 61
    LBRACE = 62
    RBRACE = 63
    SEMICOLON = 64
    COMMA = 65
    COLON = 66
    DOT = 67
    PREPROCESSOR_DIRECTIVE = 68
    STRING_LITERAL = 69
    CHAR_LITERAL = 70
    LINE_COMMENT = 71
    BLOCK_COMMENT = 72
    WS = 73

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'float'", "'double'", "'char'", "'bool'", "'string'", 
            "'if'", "'else'", "'switch'", "'case'", "'while'", "'continue'", 
            "'break'", "'default'", "'for'", "'do'", "'return'", "'class'", 
            "'const'", "'public'", "'private'", "'protected'", "'template'", 
            "'static'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'='", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'('", "')'", "'{'", "'}'", 
            "';'", "','", "':'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "DOUBLE", "CHAR", "BOOL", "STRING_K", "IF", 
            "ELSE", "SWITCH", "CASE", "WHILE", "CONTINUE", "BREAK", "DEFAULT", 
            "FOR", "DO", "RETURN", "CLASS", "CONST", "PUBLIC", "PRIVATE", 
            "PROTECTED", "TEMPLATE", "STATIC", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "INCREMENT", "DECREMENT", "EQ", "NEQ", "LT", "LTE", 
            "GT", "GTE", "AND_AND", "OR_OR", "NOT", "BIT_AND", "BIT_OR", 
            "BIT_XOR", "BIT_NOT", "LSHIFT", "RSHIFT", "ASSIGN", "PLUS_ASSIGN", 
            "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "INTEGER_LITERAL", 
            "FLOAT_LITERAL", "HEX_LITERAL", "BINARY_LITERAL", "OCTAL_LITERAL", 
            "SCIENTIFIC_LITERAL", "IDENTIFIER", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "SEMICOLON", "COMMA", "COLON", "DOT", "PREPROCESSOR_DIRECTIVE", 
            "STRING_LITERAL", "CHAR_LITERAL", "LINE_COMMENT", "BLOCK_COMMENT", 
            "WS" ]

    ruleNames = [ "INT", "FLOAT", "DOUBLE", "CHAR", "BOOL", "STRING_K", 
                  "IF", "ELSE", "SWITCH", "CASE", "WHILE", "CONTINUE", "BREAK", 
                  "DEFAULT", "FOR", "DO", "RETURN", "CLASS", "CONST", "PUBLIC", 
                  "PRIVATE", "PROTECTED", "TEMPLATE", "STATIC", "PLUS", 
                  "MINUS", "MULT", "DIV", "MOD", "INCREMENT", "DECREMENT", 
                  "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND_AND", "OR_OR", 
                  "NOT", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "LSHIFT", 
                  "RSHIFT", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "INTEGER_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BINARY_LITERAL", "OCTAL_LITERAL", "SCIENTIFIC_LITERAL", 
                  "IDENTIFIER", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "SEMICOLON", "COMMA", "COLON", "DOT", "PREPROCESSOR_DIRECTIVE", 
                  "STRING_LITERAL", "CHAR_LITERAL", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "WS" ]

    grammarFileName = "SASLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


